---
- name: Fetch .zip files from C:\infoblox and DNS_nios (Downloads), send to GM-UI, unzip locally first
  hosts: dc1,dc2
  gather_facts: no

  vars:
    base_dest: "/root/infoblox_files"   # local controller stash
    gm_host: "infoblox-gm-ui"           # reachable via SSH (key-based)
    gm_base: "/home/user"               # target base path on GM-UI

  tasks:
    # --- Controller prep ---
    - name: Ensure base destination exists on controller
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ base_dest }}"
        state: directory
        mode: "0755"
      run_once: true

    - name: Ensure per-DC dest exists on controller
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ base_dest }}/{{ inventory_hostname | upper }}"
        state: directory
        mode: "0755"

    # --- Collect *.zip from C:\infoblox on each Windows host ---
    - name: Find .zip files in C:\infoblox
      ansible.windows.win_find:
        paths: "C:\\infoblox"
        patterns: "*.zip"
        file_type: file
      register: infoblox_zips

    - name: Read each .zip as base64 from Windows
      ansible.windows.win_shell: |
        $p = '{{ zipf.path }}'
        [Convert]::ToBase64String([IO.File]::ReadAllBytes($p))
      loop: "{{ infoblox_zips.files | default([]) }}"
      loop_control:
        loop_var: zipf
      register: read_zips
      when: (infoblox_zips.files | default([]) | length) > 0

    - name: Write downloaded zips to controller
      delegate_to: localhost
      ansible.builtin.copy:
        dest: "{{ base_dest }}/{{ inventory_hostname | upper }}/{{ (item.zipf.path | regex_replace('^.*\\\\','')) }}"
        content: "{{ item.stdout | default('') | regex_replace('\\r?\\n','') | b64decode }}"
        mode: "0644"
      loop: "{{ read_zips.results | default([]) }}"
      when: item is defined and (item.stdout | default('')) != ''

    # --- DNS_nios from Downloads: zip on Windows then fetch to controller ---
    - name: Check if DNS_nios folder exists (Downloads)
      ansible.windows.win_stat:
        path: "C:\\Users\\Administrator\\Downloads\\DNS_nios"
      register: dns_nios_dir

    - name: Zip DNS_nios folder into Downloads\DNS_nios.zip (PowerShell)
      ansible.windows.win_shell: |
        $src = 'C:\Users\Administrator\Downloads\DNS_nios'
        $zip = 'C:\Users\Administrator\Downloads\DNS_nios.zip'
        if (Test-Path $src) {
          if (Test-Path $zip) { Remove-Item -LiteralPath $zip -Force }
          Compress-Archive -Path (Join-Path $src '*') -DestinationPath $zip -Force
        }
      when: dns_nios_dir.stat.exists | default(false)

    - name: Check if DNS_nios.zip now exists
      ansible.windows.win_stat:
        path: "C:\\Users\\Administrator\\Downloads\\DNS_nios.zip"
      register: dns_nios_zip

    - name: Read DNS_nios.zip as base64 from Windows
      ansible.windows.win_shell: |
        $p = 'C:\Users\Administrator\Downloads\DNS_nios.zip'
        if (Test-Path $p) { [Convert]::ToBase64String([IO.File]::ReadAllBytes($p)) }
      register: dns_b64
      when: dns_nios_zip.stat.exists | default(false)

    - name: Write DNS_nios.zip to controller
      delegate_to: localhost
      ansible.builtin.copy:
        dest: "{{ base_dest }}/{{ inventory_hostname | upper }}/DNS_nios-{{ inventory_hostname | lower }}.zip"
        content: "{{ dns_b64.stdout | default('') | regex_replace('\\r?\\n','') | b64decode }}"
        mode: "0644"
      when: dns_b64 is defined and (dns_b64.stdout | default('')) != ''

    # --- SSH prep for GM-UI (avoid interactive fingerprint prompt) ---
    - name: Add GM-UI host key to known_hosts on controller
      delegate_to: localhost
      ansible.builtin.known_hosts:
        name: "{{ gm_host }}"
        key: "{{ lookup('pipe', 'ssh-keyscan -t ecdsa -H ' ~ gm_host) }}"
        path: "~/.ssh/known_hosts"
        state: present

    - name: Ensure DC-specific folder on GM-UI
      delegate_to: localhost
      ansible.builtin.command:
        argv: ["ssh", "{{ gm_host }}", "mkdir -p {{ gm_base }}/{{ inventory_hostname | upper }}/DNS_nios"]
      changed_when: true

    # --- Unzip LOCALLY on controller, then copy everything to GM-UI ---
    - name: Find DNS_nios zip for this DC (controller)
      delegate_to: localhost
      ansible.builtin.find:
        paths: "{{ base_dest }}/{{ inventory_hostname | upper }}"
        patterns: "DNS_nios*.zip"
        file_type: file
      register: dns_zip_local

    - name: Create extraction dir on controller
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ base_dest }}/{{ inventory_hostname | upper }}/_dns_extracted"
        state: directory
        mode: "0755"
      when: (dns_zip_local.files | default([]) | length) > 0

    - name: Unarchive DNS_nios zip on controller
      delegate_to: localhost
      ansible.builtin.unarchive:
        src: "{{ dns_zip_local.files[0].path }}"
        dest: "{{ base_dest }}/{{ inventory_hostname | upper }}/_dns_extracted"
        remote_src: true
      when: (dns_zip_local.files | default([]) | length) > 0

    # Optional: tidy the zip after successful extraction
    - name: Remove DNS_nios zip after extraction (controller)
      delegate_to: localhost
      ansible.builtin.file:
        path: "{{ dns_zip_local.files[0].path }}"
        state: absent
      when: (dns_zip_local.files | default([]) | length) > 0

    - name: Collect files to copy (unzipped + other fetched zips)
      delegate_to: localhost
      ansible.builtin.find:
        paths:
          - "{{ base_dest }}/{{ inventory_hostname | upper }}"
          - "{{ base_dest }}/{{ inventory_hostname | upper }}/_dns_extracted"
        file_type: file
      register: files_to_copy

    - name: Copy files to GM-UI
      delegate_to: localhost
      ansible.builtin.command:
        argv:
          - scp
          - "-pr"
          - "{{ item.path }}"
          - >-
            {{ gm_host }}:{{ gm_base }}/{{ inventory_hostname | upper }}/{{ 'DNS_nios' if (item.path is search('_dns_extracted')) else '' }}
      loop: "{{ files_to_copy.files | default([]) }}"
      when: (files_to_copy.files | default([]) | length) > 0
      changed_when: true

    - name: List GM-UI directory after copy
      delegate_to: localhost
      ansible.builtin.command:
        argv: ["ssh", "{{ gm_host }}", "find {{ gm_base }}/{{ inventory_hostname | upper }} -maxdepth 2 -type f -ls"]
      register: gm_listing
      changed_when: false

    - name: Show GM-UI listing
      delegate_to: localhost
      ansible.builtin.debug:
        var: gm_listing.stdout_lines
