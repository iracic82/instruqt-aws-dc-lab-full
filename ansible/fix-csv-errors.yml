- name: Clean GM-UI CSV, remove error col, re-upload (auto-pick csv-error*.csv)
  hosts: localhost
  gather_facts: no

  vars:
    gm_host: "infoblox-gm-ui"
    gm_dir: "/home/user/Downloads"
    work_dir: "/root/infoblox_files/GMUI"   # scratch on controller
    out_suffix: ".fixed.csv"

  tasks:
    - name: Ensure known_hosts has GM-UI key
      ansible.builtin.known_hosts:
        name: "{{ gm_host }}"
        key: "{{ lookup('pipe', 'ssh-keyscan -t ecdsa -H ' ~ gm_host) }}"
        path: "~/.ssh/known_hosts"
        state: present

    - name: Ensure local work dir exists
      ansible.builtin.file:
        path: "{{ work_dir }}"
        state: directory
        mode: "0755"

    - name: Discover csv-error*.csv on GM-UI
      ansible.builtin.command:
        argv:
          - ssh
          - "{{ gm_host }}"
          - "ls -1 {{ gm_dir | quote }}/csv-error*.csv 2>/dev/null || true"
      register: remote_listing
      changed_when: false

    - name: Validate discovery result
      ansible.builtin.fail:
        msg: >-
          Expected exactly one csv-error*.csv in {{ gm_dir }} on {{ gm_host }},
          found {{ (remote_listing.stdout_lines | length) }}:
          {{ remote_listing.stdout_lines | join(', ') | default('none') }}.
      when: (remote_listing.stdout_lines | length) != 1

    - name: Set src/out filenames (basename + fixed suffix)
      ansible.builtin.set_fact:
        src_path: "{{ remote_listing.stdout_lines[0] }}"
        src_csv: "{{ remote_listing.stdout_lines[0] | regex_replace('^.*/', '') }}"
        out_csv: "{{ (remote_listing.stdout_lines[0] | regex_replace('^.*/', '')) ~ out_suffix }}"

    - name: Pull CSV from GM-UI -> controller
      ansible.builtin.command:
        argv:
          - scp
          - "-p"
          - "{{ gm_host }}:{{ src_path }}"
          - "{{ work_dir }}/"
      changed_when: true

    - name: Drop Python transformer
      ansible.builtin.copy:
        dest: "{{ work_dir }}/process_csv.py"
        mode: "0755"
        content: |
          #!/usr/bin/env python3
          import csv, sys

          src = sys.argv[1]
          dst = sys.argv[2]

          def strip_bom(s):
              return s.lstrip("\ufeff") if isinstance(s, str) else s

          with open(src, newline='', encoding='utf-8') as f_in:
              reader = csv.reader(f_in)
              rows = list(reader)
          if not rows:
              print("[SUMMARY] kept=0, dropped=0, removed_error_column=True (empty file)")
              sys.exit(0)

          # Remove first column entirely
          header = [strip_bom(x) for x in rows[0][1:]]

          # Locate fqdn column (support 'fqdn*' or 'fqdn')
          try:
              fqdn_idx = header.index('fqdn*')
          except ValueError:
              try:
                  fqdn_idx = header.index('fqdn')
              except ValueError:
                  fqdn_idx = None

          kept = dropped = 0
          with open(dst, 'w', newline='', encoding='utf-8') as f_out:
              w = csv.writer(f_out)
              w.writerow(header)
              for r in rows[1:]:
                  if not r:
                      continue
                  error_col = (r[0] or "")
                  # Drop non-authoritative zone errors
                  if "not authoritative" in error_col:
                      dropped += 1
                      continue
                  new_row = r[1:]
                  if fqdn_idx is not None and len(new_row) > fqdn_idx and new_row[fqdn_idx]:
                      new_row[fqdn_idx] = new_row[fqdn_idx].replace("/", "-")
                  w.writerow(new_row)
                  kept += 1

          print(f"[SUMMARY] kept={kept}, dropped={dropped}, removed_error_column=True")

    - name: Run transformer
      ansible.builtin.command:
        argv:
          - python3
          - "{{ work_dir }}/process_csv.py"
          - "{{ work_dir }}/{{ src_csv }}"
          - "{{ work_dir }}/{{ out_csv }}"
      register: transform_out
      changed_when: "'[SUMMARY] ' in (transform_out.stdout | default(''))"

    - name: Show summary
      ansible.builtin.debug:
        msg: "{{ transform_out.stdout | default('no output') }}"

    - name: Push corrected CSV back to GM-UI
      ansible.builtin.command:
        argv:
          - scp
          - "-p"
          - "{{ work_dir }}/{{ out_csv }}"
          - "{{ gm_host }}:{{ gm_dir }}/{{ out_csv }}"
      changed_when: true

    - name: List files on GM-UI
      ansible.builtin.command:
        argv:
          - ssh
          - "{{ gm_host }}"
          - "ls -l {{ gm_dir }}/{{ src_csv }} {{ gm_dir }}/{{ out_csv }}"
      register: gm_ls
      changed_when: false

    - name: Show GM-UI listing
      ansible.builtin.debug:
        var: gm_ls.stdout_lines
