---
- name: Fetch .zip files from C:\infoblox and DNS_nios (Downloads), send to GM-UI, unzip DNS_nios.zip
  hosts: dc1,dc2
  gather_facts: no
  vars:
    base_dest: "/root/infoblox_files"
    gm_host: "infoblox-gm-ui"          # reachable via SSH (key-based)
    gm_base: "/home/user"

  tasks:
    # --- Controller prep ---
    - name: Ensure base destination exists on controller
      ansible.builtin.file:
        path: "{{ base_dest }}"
        state: directory
        mode: "0755"
      delegate_to: localhost
      run_once: true

    - name: Ensure per-DC dest exists on controller
      ansible.builtin.file:
        path: "{{ base_dest }}/{{ inventory_hostname | upper }}"
        state: directory
        mode: "0755"
      delegate_to: localhost

    # --- Collect *.zip from C:\infoblox ---
    - name: Find .zip files in C:\infoblox
      ansible.windows.win_find:
        paths: "C:\\infoblox"
        patterns: "*.zip"
        file_type: file
      register: infoblox_zips

    - name: Copy each .zip from DC to controller
      ansible.windows.win_copy:
        src: "{{ item.path }}"
        dest: "{{ base_dest }}/{{ inventory_hostname | upper }}/"
        remote_src: yes
      loop: "{{ infoblox_zips.files | default([]) }}"
      when: (infoblox_zips.files | default([]) | length) > 0

    # --- DNS_nios from Downloads: zip then fetch ---
    - name: Check if DNS_nios folder exists (Downloads)
      ansible.windows.win_stat:
        path: "C:\\Users\\Administrator\\Downloads\\DNS_nios"
      register: dns_nios_dir

    - name: Zip DNS_nios folder into Downloads\\DNS_nios.zip (PowerShell)
      ansible.windows.win_shell: |
        $src = "C:\Users\Administrator\Downloads\DNS_nios"
        $zip = "C:\Users\Administrator\Downloads\DNS_nios.zip"
        if (Test-Path $src) {
          if (Test-Path $zip) { Remove-Item -LiteralPath $zip -Force }
          Compress-Archive -Path (Join-Path $src '*') -DestinationPath $zip -Force
        }
      when: dns_nios_dir.stat.exists | default(false)

    - name: Check if DNS_nios.zip now exists
      ansible.windows.win_stat:
        path: "C:\\Users\\Administrator\\Downloads\\DNS_nios.zip"
      register: dns_nios_zip

    - name: Fetch DNS_nios.zip (if it exists)
      ansible.windows.win_copy:
        src: "C:\\Users\\Administrator\\Downloads\\DNS_nios.zip"
        dest: "{{ base_dest }}/{{ inventory_hostname | upper }}/"
        remote_src: yes
      when: dns_nios_zip.stat.exists | default(false)

    # --- Push to GM-UI ---
    - name: Ensure DC-specific folder on GM-UI
      ansible.builtin.command:
        argv:
          - ssh
          - "{{ gm_host }}"
          - "mkdir -p {{ gm_base }}/{{ inventory_hostname | upper }}"
      delegate_to: localhost
      changed_when: true

    - name: Get list of fetched files for this DC on controller
      ansible.builtin.find:
        paths: "{{ base_dest }}/{{ inventory_hostname | upper }}"
        file_type: file
      delegate_to: localhost
      register: local_files

    - name: Copy fetched files to GM-UI (per-file scp)
      ansible.builtin.command:
        argv:
          - scp
          - "-r"
          - "{{ item.path }}"
          - "{{ gm_host }}:{{ gm_base }}/{{ inventory_hostname | upper }}/"
      loop: "{{ local_files.files }}"
      when: (local_files.matched | default(0)) | int > 0
      delegate_to: localhost
      changed_when: true

    # --- Unzip DNS_nios.zip on GM-UI (optional, if present) ---
    - name: Unzip any DNS_nios*.zip on GM-UI, then remove the zips
      tags: [gm_unzip]
      delegate_to: localhost
      vars:
        dc_upper: "{{ inventory_hostname | upper }}"
      shell: |
        ssh {{ gm_host }} 'bash -lc "
          set -e
          cd {{ gm_base }}/{{ dc_upper }} || exit 0
          # Ensure unzip exists; if not, try to install (comment if not allowed)
          if ! command -v unzip >/dev/null 2>&1; then
            if command -v apt-get >/dev/null 2>&1; then apt-get update -y && apt-get install -y unzip || true; fi
            if command -v yum >/dev/null 2>&1; then yum install -y unzip || true; fi
          fi
          # Collect matching files first; only loop if we have any
          files=\$(ls -1 DNS_nios*.zip 2>/dev/null || true)
          if [ -n \"\$files\" ]; then
            for z in \$files; do
              d=\"\${z%.zip}\"
              mkdir -p \"\$d\"
              unzip -o \"\$z\" -d \"\$d\"
              rm -f \"\$z\"
            done
          fi
        "'
      changed_when: true
