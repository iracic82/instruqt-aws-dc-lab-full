- name: Build AD forest, add 2nd DC, and import DNS zones/records (microsoft.ad)
  hosts: windows
  gather_facts: no

  vars:
    domain_name: corp.infolab
    domain_netbios: CORP
    domain_admin_password: "{{ ansible_password }}"

    dc1_ip: 10.100.1.100
    dc2_ip: 10.100.1.101

    dns_forwarders: [8.8.8.8, 1.1.1.1]
    dns_import_dir: 'C:\dns-import'

  tasks:
    - name: Set DNS client on both nodes to DC1 initially
      ansible.windows.win_dns_client:
        adapter_names: '*'
        ipv4_addresses: ["{{ dc1_ip }}"]

    - name: Install ADDS, DNS, DHCP roles + tools
      ansible.windows.win_feature:
        name: [AD-Domain-Services, DNS, DHCP]
        state: present
        include_management_tools: yes

    # -----------------------------
    # DC1: Create forest root domain
    # -----------------------------
    - name: Promote DC1 as forest root (creates AD-integrated DNS for {{ domain_name }})
      microsoft.ad.domain:
        dns_domain_name: "{{ domain_name }}"
        safe_mode_password: "{{ ansible_password }}"
        install_dns: true
        reboot: true
      when: inventory_hostname == "dc1"

    - name: Wait for DC1 to come back after forest promotion
      ansible.builtin.wait_for_connection:
        timeout: 900
      when: inventory_hostname == "dc1"

    - name: Wait for NetLogon/SYSVOL to be advertised (DC1)
      ansible.windows.win_shell: |
        nltest /dsgetdc:{{ domain_name }}
      register: dc1_adv
      retries: 20
      delay: 15
      until: dc1_adv.rc == 0
      when: inventory_hostname == "dc1"

    - name: Wait for SYSVOL share to exist (DC1)
      ansible.windows.win_shell: |
        if (Test-Path \\localhost\SYSVOL) { exit 0 } else { exit 1 }
      register: sysvol1
      retries: 20
      delay: 15
      until: sysvol1.rc == 0
      when: inventory_hostname == "dc1"

    - name: Configure DNS forwarders on DC1 (authoritative set)
      ansible.windows.win_shell: |
        Import-Module DnsServer
        $current = (Get-DnsServerForwarder).IPAddress.IPAddressToString
        $desired = @({{ dns_forwarders | map('quote') | join(', ') }})
        if (-not (@($current) -ceq @($desired))) {
        Set-DnsServerForwarder -IPAddress {{ dns_forwarders | join(',') }} -UseRootHint $false
        }
        Get-DnsServerForwarder | Format-List | Out-String
      when: inventory_hostname == "dc1"
      tags: [dns_forwarders]

    # --------------------------------
    # DC2: Join domain & promote to DC
    # --------------------------------
    - name: From DC2, wait for LDAP 389 on DC1
      ansible.windows.win_shell: |
        $tcp = New-Object Net.Sockets.TcpClient
        $res = $tcp.BeginConnect("{{ dc1_ip }}",389,$null,$null)
        if (-not $res.AsyncWaitHandle.WaitOne(300000)) { throw "Timeout waiting for 389 on DC1" }
      when: inventory_hostname == "dc2"

    - name: Join DC2 to the domain
      microsoft.ad.membership:
        dns_domain_name: "{{ domain_name }}"
        domain_admin_user: "{{ domain_netbios }}\\Administrator"
        domain_admin_password: "{{ domain_admin_password }}"
        state: domain
      when: inventory_hostname == "dc2"

    - name: Reboot DC2 after domain join
      ansible.windows.win_reboot:
        pre_reboot_delay: 10
      when: inventory_hostname == "dc2"

    - name: Wait for DC2 after join
      ansible.builtin.wait_for_connection:
        timeout: 900
      when: inventory_hostname == "dc2"

    - name: Promote DC2 to additional domain controller with DNS
      microsoft.ad.domain_controller:
        dns_domain_name: "{{ domain_name }}"
        domain_admin_user: "{{ domain_netbios }}\\Administrator"
        domain_admin_password: "{{ domain_admin_password }}"
        safe_mode_password: "{{ ansible_password }}"
        install_dns: yes
        state: domain_controller
        reboot: true
      when: inventory_hostname == "dc2"

    - name: Wait for DC2 after DC promotion
      ansible.builtin.wait_for_connection:
        timeout: 900
      when: inventory_hostname == "dc2"
    
    - name: Wait for NetLogon/SYSVOL to be advertised (DC2)
      ansible.windows.win_shell: nltest /dsgetdc:{{ domain_name }}
      register: dc2_adv
      retries: 20
      delay: 15
      until: dc2_adv.rc == 0
      when: inventory_hostname == "dc2"

    - name: Wait for SYSVOL share to exist (DC2)
      ansible.windows.win_shell: |
        if (Test-Path \\localhost\SYSVOL) { exit 0 } else { exit 1 }
      register: sysvol2
      retries: 20
      delay: 15
      until: sysvol2.rc == 0
      when: inventory_hostname == "dc2"
    
    - name: Configure DNS forwarders (authoritative set)
      ansible.windows.win_shell: |
        Import-Module DnsServer
        $desired = @({{ dns_forwarders | map('quote') | join(', ') }})
        $cur = (Get-DnsServerForwarder -ErrorAction SilentlyContinue).IPAddress.IPAddressToString
        if (-not $cur) { $cur = @() }
        if (-not (@($cur) -ceq @($desired))) {
          Set-DnsServerForwarder -IPAddress {{ dns_forwarders | join(',') }} -UseRootHint $false
        }
        Get-DnsServerForwarder | Format-List | Out-String
      when: inventory_hostname == "dc2"
      tags: [dns_forwarders]
    
    # --------------------------------
    # Extra safeguard: Wait for replication before DNS import
    # --------------------------------
    - name: Wait until key zone exists on BOTH DCs before import
      ansible.windows.win_shell: |
        try {
          $zone = Get-DnsServerZone -Name "{{ domain_name }}" -ErrorAction Stop
          if ($zone) { exit 0 } else { exit 1 }
        } catch { exit 1 }
      register: zone_ready
      retries: 20
      delay: 15
      until: zone_ready.rc == 0
      when: inventory_hostname == "dc1"

    # --------------------------------
    # DC1: Stage & run DNS import (tagged)
    # --------------------------------
    - name: Create import directory on DC1
      ansible.windows.win_file:
        path: "{{ dns_import_dir }}"
        state: directory
      when: inventory_hostname == "dc1"
      tags: [dns_import]

    - name: Copy DNS restore script and zone list to DC1
      ansible.windows.win_copy:
        src: "{{ item }}"
        dest: "{{ dns_import_dir }}\\"
      loop:
        - files/dns_restore_3.ps1
        - files/zone_list.txt
      when: inventory_hostname == "dc1"
      tags: [dns_import]

    - name: Copy all zone files (*.dns) to DC1
      ansible.windows.win_copy:
        src: "files/zones/"
        dest: "{{ dns_import_dir }}\\"
      when: inventory_hostname == "dc1"
      tags: [dns_import]

    # Make sure the DNS service is up
    - name: Ensure DNS service is running (DC1)
      ansible.windows.win_service:
        name: DNS
        state: started
        start_mode: auto
      when: inventory_hostname == "dc1"

    # Prove DNS can CREATE a zone (write-ready) before we run the importer
    - name: Wait until DNS can create & delete a test zone (DC1)
      ansible.windows.win_shell: |
        Import-Module DnsServer
        $z = 'ansible-probe.local'
        try {
            if (Get-DnsServerZone -Name $z -ErrorAction SilentlyContinue) {
            Remove-DnsServerZone -Name $z -Force
            }
            Add-DnsServerPrimaryZone -Name $z -ZoneFile "$z.dns" -ErrorAction Stop | Out-Null
            Remove-DnsServerZone -Name $z -Force -ErrorAction Stop
            exit 0
        } catch {
          exit 1
        }
      register: dns_writable
      retries: 20
      delay: 15
      until: dns_writable.rc == 0
      when: inventory_hostname == "dc1"

    - name: Validate DNS import (DryRun) on DC1
      ansible.windows.win_shell: |
        Set-Location {{ dns_import_dir }}
        powershell.exe -ExecutionPolicy Bypass -File .\dns_restore_3.ps1 -DryRun
      args:
        chdir: "{{ dns_import_dir }}"
      when: inventory_hostname == "dc1"
      tags: [dns_import]

    - name: Run DNS import exactly once on DC1 (fail on real errors)
      ansible.windows.win_shell: |
        $ErrorActionPreference='Stop'
        Set-Location {{ dns_import_dir }}
        if (!(Test-Path .\import.done)) {
          $out = powershell.exe -NoProfile -NonInteractive -ExecutionPolicy Bypass -File .\dns_restore_3.ps1 2>&1
          $out | Out-String
          New-Item -ItemType File .\import.done | Out-Null
        } else { 'import.done present; skipping' }
      args:
        chdir: "{{ dns_import_dir }}"
      register: import_run
      when: inventory_hostname == "dc1"
      changed_when: "'skipping' not in (import_run.stdout | default(''))"
      failed_when: >
        import_run.rc != 0 or
        (
            (import_run.stdout | default('')) is string and
            ('Command failed' in import_run.stdout) and
            (' 9711 ' not in import_run.stdout)
        )
      tags: [dns_import]

    - name: Confirm key zone exists on DC1
      ansible.windows.win_shell: "(Get-DnsServerZone -Name 'blox.corp' -ErrorAction Stop) | Out-String"
      register: zone_check
      when: inventory_hostname == "dc1"
      changed_when: false
      tags: [dns_import]
    # --------------------------------
    # Final DNS client settings on DC1/DC2
    # --------------------------------
    - name: Update DNS client on DC1/2 to use itself first, then peer
      ansible.windows.win_dns_client:
        adapter_names: '*'
        ipv4_addresses:
          - "{{ dc1_ip if inventory_hostname == 'dc1' else dc2_ip }}"
          - "{{ dc2_ip if inventory_hostname == 'dc1' else dc1_ip }}"
    # --------------------------------
    # Copy migration helper scripts to both DCs
    # --------------------------------
    - name: Ensure C:\infoblox exists
      ansible.windows.win_file:
        path: C:\infoblox
        state: directory
      tags: [migration_scripts]

    - name: Copy migration scripts to C:\infoblox
      ansible.windows.win_copy:
        src: "{{ playbook_dir }}/migration/{{ item }}"
        dest: "C:\\infoblox\\"
      loop:
        - ad-dc-convert-go-live.cmd
        - ad-dc-convert-roll-back.cmd
        - extract-ms-dns.ps1
      tags: [migration_scripts]

    - name: Unblock PowerShell scripts in C:\infoblox
      ansible.windows.win_shell: |
        PowerShell -NoProfile -ExecutionPolicy Bypass -Command "Unblock-File -Path 'C:\infoblox\*.ps1' -Force"
        changed_when: false
      tags: [migration_scripts]
